name: Google Kubernetes Engine Deployment

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker images
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/data_ingestion:latest -f data_ingestion/Dockerfile data_ingestion/
        docker build -t ${{ secrets.DOCKER_USERNAME }}/data_processing:latest -f data_processing/Dockerfile data_processing/
        docker build -t ${{ secrets.DOCKER_USERNAME }}/anomaly_detection_cgnn:latest -f anomaly_detection/cgnn/Dockerfile anomaly_detection/cgnn/
        docker build -t ${{ secrets.DOCKER_USERNAME }}/anomaly_detection_crca:latest -f anomaly_detection/crca/Dockerfile anomaly_detection/crca/
        docker build -t ${{ secrets.DOCKER_USERNAME }}/learning_adaptation:latest -f learning_adaptation/Dockerfile learning_adaptation/
        docker build -t ${{ secrets.DOCKER_USERNAME }}/monitoring_project:latest -f user_interface/monitoring_project/Dockerfile user_interface/monitoring_project/
        docker push ${{ secrets.DOCKER_USERNAME }}/data_ingestion:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/data_processing:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/anomaly_detection_cgnn:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/anomaly_detection_crca:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/learning_adaptation:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/monitoring_project:latest

    # - name: Set up Google Cloud SDK
    #   uses: google-github-actions/setup-gcloud@v0
    #   with:
    #     version: 'latest'
    #     service_account_key: ${{ secrets.GCP_SA_KEY }}
    #     export_default_credentials: true

    # - name: Check if gke-gcloud-auth-plugin is installed
    #   run: |
    #     if ! dpkg -l | grep -q 'google-cloud-sdk-gke-gcloud-auth-plugin'; then
    #       echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
    #       sudo apt-get install -y apt-transport-https ca-certificates gnupg
    #       curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
    #       sudo apt-get update -y
    #       sudo apt-get install -y google-cloud-sdk-gke-gcloud-auth-plugin
    #     else
    #       echo "gke-gcloud-auth-plugin is already installed"
    #     fi

    # - name: Configure kubectl
    #   run: |
    #     gcloud container clusters get-credentials cscluster --zone us-central1-a --project cloudsentinel-427513

    # - name: Check if Helm is installed
    #   run: |
    #     if ! command -v helm &> /dev/null; then
    #       curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
    #     else
    #       echo "Helm is already installed"
    #     fi

    # - name: Add Prometheus Helm repository if not already added
    #   run: |
    #     if ! helm repo list | grep -q 'prometheus-community'; then
    #       helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
    #       helm repo update
    #     else
    #       echo "Prometheus Helm repository is already added"
    #     fi

    # - name: Deploy Prometheus if not already deployed
    #   run: |
    #     if ! kubectl get namespaces | grep -q 'monitoring'; then
    #       kubectl create namespace monitoring || true
    #     else
    #       echo "Namespace 'monitoring' already exists"
    #     fi

    #     if ! helm list -n monitoring | grep -q 'prometheus'; then
    #       helm install prometheus prometheus-community/prometheus -n monitoring
    #     else
    #       echo "Prometheus is already deployed in the 'monitoring' namespace"
    #     fi

    # - name: Deploy to Kubernetes
    #   run: |
    #     kubectl apply -f k8s/namespace-deployment.yml
    #     kubectl apply -f k8s/redis-deployment.yml
    #     kubectl apply -f k8s/data_ingestion-deployment.yml
    #     kubectl apply -f k8s/data_ingestion_celery-deployment.yml
    #     kubectl apply -f k8s/data_processing-deployment.yml
    #     kubectl apply -f k8s/cgnn_anomaly_detection-deployment.yml
    #     kubectl apply -f k8s/crca_anomaly_detection-deployment.yml
    #     kubectl apply -f k8s/crca_anomaly_detection-celery-deployment.yml
    #     kubectl apply -f k8s/learning_adaptation-deployment.yml
    #     kubectl apply -f k8s/learning_adaptation-celery-deployment.yml
    #     kubectl apply -f k8s/monitoring_project-deployment.yml

    #     kubectl set image deployment/data-ingestion-deployment data-ingestion=${{ secrets.DOCKER_USERNAME }}/data_ingestion:latest -n cloudsentinel
    #     kubectl set image deployment/celery-worker-deployment  celery-worker=${{ secrets.DOCKER_USERNAME }}/data_ingestion:latest -n cloudsentinel
    #     kubectl set image deployment/data-processing-deployment data-processing=${{ secrets.DOCKER_USERNAME }}/data_processing:latest -n cloudsentinel
    #     kubectl set image deployment/cgnn-anomaly-detection-deployment cgnn-anomaly-detection=${{ secrets.DOCKER_USERNAME }}/anomaly_detection_cgnn:latest -n cloudsentinel
    #     kubectl set image deployment/crca-anomaly-detection-deployment crca-anomaly-detection=${{ secrets.DOCKER_USERNAME }}/anomaly_detection_crca:latest -n cloudsentinel
    #     kubectl set image deployment/crca-anomaly-detection-celery-deployment crca-anomaly-detection-celery=${{ secrets.DOCKER_USERNAME }}/anomaly_detection_crca:latest -n cloudsentinel
    #     kubectl set image deployment/learning-adaptation-deployment learning-adaptation=${{ secrets.DOCKER_USERNAME }}/learning_adaptation:latest -n cloudsentinel
    #     kubectl set image deployment/learning-adaptation-celery-deployment learning-adaptation-celery=${{ secrets.DOCKER_USERNAME }}/learning_adaptation:latest -n cloudsentinel
    #     kubectl set image deployment/monitoring-project-deployment monitoring-project=${{ secrets.DOCKER_USERNAME }}/monitoring_project:latest -n cloudsentinel

    #     kubectl rollout restart deployment -n cloudsentinel